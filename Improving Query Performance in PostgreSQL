Where are all the athletes from

-- Athlete count by country and region
SELECT reg.region
  , reg.country
  , COUNT(DISTINCT ath.athlete_id) AS no_athletes -- Athletes can compete in multiple events
FROM athletes ath
INNER JOIN oregions reg
  ON reg.olympic_cc = ath.country_code
GROUP BY reg.region, reg.country
ORDER BY no_athletes;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Using different joins to explore athletes' regions

SELECT reg.region, reg.country
  , COUNT(DISTINCT ath.athlete_id) AS no_athletes
FROM regions reg
LEFT JOIN athletes ath
  ON reg.olympic_cc = ath.country_code
GROUP BY reg.region, reg.country
ORDER BY no_athletes DESC;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT reg.region, reg.country
  , COUNT(DISTINCT ath.athlete_id) AS no_athletes
FROM athletes ath
RIGHT JOIN regions reg
  ON ath.country_code = reg.olympic_cc
GROUP BY reg.region, reg.country
ORDER BY no_athletes DESC;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT reg.region, reg.country
  , COUNT(DISTINCT ath.athlete_id) AS no_athletes
FROM athletes ath
INNER JOIN regions reg
  ON ath.country_code = reg.olympic_cc
GROUP BY reg.region, reg.country
ORDER BY no_athletes DESC;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What about the weather

SELECT reg.region
  , ath.season
  , COUNT(DISTINCT ath.athlete_id) AS no_athletes
  , COUNT(DISTINCT reg.olympic_cc) AS no_countries
  , COUNT(DISTINCT ath.athlete_id)/COUNT(DISTINCT reg.olympic_cc) AS athletes_per_country
FROM athletes ath
INNER JOIN oregions reg
  ON ath.country_code = reg.olympic_cc
GROUP BY reg.region, ath.season -- Group by region and season
ORDER BY reg.region, athletes_per_country;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Filtering to freezing with a subquery

-- Countries cold enough for snow year-round
SELECT country_code
  , country
  , COUNT (DISTINCT athlete_id) AS winter_athletes -- Athletes can compete in multiple events
FROM athletes
WHERE country_code IN (SELECT olympic_cc FROM oclimate WHERE temp_annual < 0)
AND season = 'Winter'
GROUP BY country_code, country;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Where winter is white

WITH south_cte AS -- CTE
(
  SELECT region
    , ROUND(AVG(temp_06),2) AS avg_winter_temp
    , ROUND(AVG(precip_06),2) AS avg_winter_precip
  FROM oclimate
  WHERE region IN ('Africa','South America','Australia and Oceania')
  GROUP BY region
)

SELECT south.region, south.avg_winter_temp, south.avg_winter_precip
  , COUNT(DISTINCT ath.athlete_id)
FROM south_cte as south 
INNER JOIN athletes_recent ath
  ON south.region = ath.region
  AND ath.season = 'Winter'
GROUP BY south.region, south.avg_winter_temp, south.avg_winter_precip
ORDER BY south.avg_winter_temp;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Countries with subqueries or CTEs

-- Climate by country with Olympian athletes
SELECT country
  , temp_06
  , precip_06
FROM climate
WHERE region = 'Africa'
AND olympic_cc IN (SELECT DISTINCT country_code FROM athletes_wint)
ORDER BY temp_06;
-----------------------------------------------------------------------------------------------------------------------------------------------
WITH countries_cte AS -- CTE
(
    SELECT olympic_cc
      , country
      , temp_06
      , precip_06
    FROM climate
    WHERE region = 'Africa'
)

SELECT DISTINCT cte.country
  , cte.temp_06
  , cte.precip_06
FROM athletes_wint AS wint
INNER JOIN countries_cte AS cte
  ON wint.country_code = cte.olympic_cc
ORDER BY temp_06;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Canadians temp table

-- Create a temp table of Canadians
CREATE TEMP TABLE canadians AS
    SELECT *
    FROM athletes_recent
    WHERE country_code = 'CAN'
    AND season = 'Winter'; -- The table has both summer and winter athletes

-- Find the most popular sport
SELECT sport
  , COUNT(DISTINCT athlete_id) as no_athletes
FROM canadians
GROUP BY sport 
ORDER BY no_athletes DESC;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Analyze that temp table

-- Create temp countries table
CREATE TEMP TABLE countries AS
    SELECT DISTINCT o.region, a.country_code, o.country
    FROM athletes a
    INNER JOIN oregions o
      ON a.country_code = o.olympic_cc;
      
ANALYZE countries; -- Collect the statistics

-- Count the entries
SELECT COUNT(*) FROM countries;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Group by and aggregations

SELECT reg.region, COUNT(DISTINCT dem.olympic_cc)
FROM regions reg -- Olympics region data
LEFT JOIN demographics dem -- World Bank population data
  ON dem.olympic_cc = reg.olympic_cc
GROUP BY reg.region;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Count and count distinct

SELECT country_code
  , COUNT(athlete_id) as medals_count
FROM athletes_recent
WHERE medal IS NOT NULL
AND year = 2016
GROUP BY country_code
ORDER BY medals_count DESC;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT country_code
  , COUNT(DISTINCT athlete_id) as medals_count
FROM athletes_recent
WHERE medal IS NOT NULL
AND year = 2016
GROUP BY country_code
ORDER BY medals_count DESC;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OR versus IN with athletes

SELECT COUNT(*)
FROM athletes_wint 
WHERE age = 11
OR age = 12;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT *
FROM athletes_wint 
WHERE age IN (11,12);
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Data type filters

SELECT games
  , name
  , age
FROM athletes_wint
WHERE games IN ('1960 Winter','2010 Winter')
ORDER BY games;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT games
  , name
  , age
FROM athletes_wint
WHERE year IN (1960, 2010)
ORDER BY games;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN the filter query plan step

SELECT *
FROM athletes_wint
WHERE age < 16;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Where to place a region filter

SELECT dem.olympic_cc, reg.country, dem.gdp, dem.population
FROM demographics dem
LEFT JOIN oregions reg
  ON dem.olympic_cc = reg.olympic_cc
  AND reg.region = 'Africa'
WHERE dem.year = 2014
AND dem.gdp IS NOT NULL
ORDER BY dem.gdp DESC; 
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT dem.olympic_cc, reg.country, dem.gdp, dem.population
FROM demographics dem
LEFT JOIN oregions reg
  ON dem.olympic_cc = reg.olympic_cc
WHERE dem.year = 2014
AND reg.region = 'Africa'
AND dem.gdp IS NOT NULL
ORDER BY dem.gdp DESC;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT dem.olympic_cc, reg.country, dem.gdp, dem.population
FROM demographics dem
INNER JOIN oregions reg
  ON dem.olympic_cc = reg.olympic_cc
  AND reg.region = 'Africa'
WHERE dem.year = 2014
AND dem.gdp IS NOT NULL
ORDER BY dem.gdp DESC;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Filtering in the join, where, and select

SELECT DISTINCT ath.name, dem.country, dem.gdp
FROM athletes_wint ath
INNER JOIN odemographics dem
  ON ath.country_code = dem.olympic_cc 
WHERE ath.year = 2014
ORDER BY dem.gdp DESC;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Aggregate before joining tables

-- Count the number of athletes by country
SELECT country_code
  , year
  , COUNT(athlete_id) AS no_athletes
FROM athletes
GROUP BY country_code, year;
-----------------------------------------------------------------------------------------------------------------------------------------------
-- Number of competing athletes
WITH athletes as (
  SELECT country_code, year, COUNT(athlete_id) AS no_athletes
  FROM athletes
  GROUP BY country_code, year
)

SELECT demos.country, ath.year, ath.no_athletes
    , demos.gdp_rank
    , demos.population_rank
FROM athletes ath
INNER JOIN demographics_rank demos  
  ON ath.country_code = demos.olympic_cc -- Country
  AND ath.year = demos.year -- Year
ORDER BY ath.no_athletes DESC;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
South African trends

SELECT year
  , season
  , COUNT(DISTINCT athlete_id) AS no_athletes
FROM athletes
WHERE country_code = 'RSA'
GROUP BY year, season
-----------------------------------------------------------------------------------------------------------------------------------------------
-- South African athletes by year
WITH athletes_cte AS 
(
    SELECT year
      , season
      , COUNT(DISTINCT athlete_id) AS no_athletes
    FROM athletes
    WHERE country_code = 'RSA' -- South Africa filter
    GROUP BY year, season
)

SELECT ath.year
  , ath.season
  , ath.no_athletes
  , demos.gdp_rounded
  , demos.gdp_rank
  , demos.population_rounded
  , demos.population_rank
FROM athletes_cte ath
INNER JOIN demographics_rank demos
  ON ath.year = demos.year
  AND demos.olympic_cc = 'RSA' -- Filter to South Africa
ORDER BY ath.season, ath.year;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Finding the table type

SELECT DISTINCT table_type 
FROM information_schema.tables 
WHERE table_catalog = 'olympics_aqi'; 
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT *
FROM information_schema.tables 
WHERE table_catalog = 'olympics_aqi' 
AND table_name = 'annual_aqi';
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Previewing a row-oriented table

EXPLAIN
SELECT *
FROM daily_aqi;
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN
SELECT *
FROM daily_aqi
LIMIT 10;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Partitioning on location

EXPLAIN
SELECT * 
FROM daily_aqi
WHERE state_code = 15; -- Hawaii state code
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN
SELECT * 
FROM daily_aqi_partitioned
WHERE state_code = 15; -- Hawaii state code
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT county_name
  , aqi
  , category
  , aqi_date
FROM daily_aqi_partitioned
WHERE state_code = 15 
ORDER BY aqi;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Finding the database indexes

SELECT tablename
, indexname
FROM pg_indexes;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Creating and using an index

SELECT indexname
FROM pg_indexes
WHERE tablename = 'daily_aqi'; -- Filter condition
-----------------------------------------------------------------------------------------------------------------------------------------------
CREATE INDEX defining_parameter_index 
 ON daily_aqi (defining_parameter); -- Define the index creation

SELECT indexname -- Check for the index
FROM pg_indexes
WHERE tablename = 'daily_aqi';
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Compare runtimes

SELECT category
  , COUNT(*) as record_cnt
  , SUM(no_sites) as aqi_monitoring_site_cnt
FROM daily_aqi
WHERE category <> 'Good'
AND state_code = 15 -- Filter to Hawaii
GROUP BY category;
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN
SELECT category
  , COUNT(*) as record_cnt
  , SUM(no_sites) as aqi_monitoring_site_cnt
FROM daily_aqi
WHERE defining_parameter = 'SO2'
AND category <> 'Good'
AND state_code = 15 -- Filter to Hawaii
GROUP BY  category;
-----------------------------------------------------------------------------------------------------------------------------------------------
CREATE INDEX defining_parameter_index ON daily_aqi (defining_parameter); 

EXPLAIN
SELECT category
  , COUNT(*) as record_cnt
  , SUM(no_sites) as aqi_monitoring_site_cnt
FROM daily_aqi
WHERE defining_parameter = 'SO2'
AND category <> 'Good'
AND state_code = 15 -- Hawaii
GROUP BY  category;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Using the information schema

-- Examine metadata about daily_aqi
SELECT column_name, data_type, is_nullable
FROM information_schema.columns
WHERE table_catalog = 'olympics_aqi'
AND table_name = 'daily_aqi' -- Limit to a specific table
; 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exploring pg_tables

SELECT relhasindex -- Index indicator column
FROM pg_class
WHERE relname = 'daily_aqi';
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT *
FROM pg_stats
WHERE tablename = 'daily_aqi'
AND attname = 'category';
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Basic EXPLAIN

EXPLAIN
SELECT * 
FROM daily_aqi;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Index scans

CREATE INDEX good_index 
ON annual_aqi(good);

EXPLAIN
SELECT state_name, county_name, aqi_year, good
FROM annual_aqi
WHERE good > 327 -- 90% of the year
AND aqi_year IN (2017,2018);
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN the WHERE

SELECT COUNT(*)
FROM daily_aqi
WHERE state_code = 15 -- Hawaii state code
AND no_sites > 1;
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN
SELECT *
FROM daily_aqi
WHERE state_code = 15 -- Hawaii state code
AND no_sites > 1;
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN
SELECT *
FROM daily_aqi_partitioned
WHERE state_code = 15 -- partitioned on state code
AND no_sites > 1;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN parameters

EXPLAIN VERBOSE
SELECT *
FROM country_demos;
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN ANALYZE
SELECT *
FROM country_demos;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Aggregating and sorting populations

SELECT country
 , region
 , MAX(population) - MIN(population) as population_change
FROM country_pop 
GROUP BY country, region;
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN ANALYZE
SELECT country
 , region
 , MAX(population) - MIN(population) as population_change
FROM country_pop 
GROUP BY country, region;
-----------------------------------------------------------------------------------------------------------------------------------------------
SELECT country
 , region
 , MAX(population) - MIN(population) as population_change
FROM country_pop  
GROUP BY country, region
ORDER BY population_change DESC;
-----------------------------------------------------------------------------------------------------------------------------------------------
EXPLAIN ANALYZE
SELECT country
 , region
 , MAX(population) - MIN(population) as population_change
FROM country_pop 
GROUP BY country, region
ORDER BY population_change DESC;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Joining in the query plan

SELECT old.country
, old.region
, old.population_1990
, new.population_2017
, 100*((new.population_2017 - old.population_1990)/new.population_2017::float) as population_growth
FROM pop_1990 old
INNER JOIN pop_2017 new 
USING(country)
ORDER BY population_growth DESC
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Subqueries vs. CTEs

-- Subquery
EXPLAIN ANALYZE
SELECT city
, sex
, COUNT(DISTINCT athlete_id) as no_athletes
, AVG(age) as avg_age
FROM athletes_summ
WHERE country_code IN (SELECT olympic_cc FROM demographics WHERE gdp > 10000 and year = 2016) 
AND year = 2016
GROUP BY city, sex;
-----------------------------------------------------------------------------------------------------------------------------------------------
-- Note the initial step in the query plan

-- Common Table Expression (CTE)
EXPLAIN ANALYZE
WITH gdp AS -- From the demographics table
(
  SELECT olympic_cc FROM demographics WHERE gdp > 10000 and year = 2016
)
SELECT a.city, a.sex
  , COUNT(DISTINCT a.athlete_id) as no_athletes
  , AVG(a.age) as avg_age
FROM athletes_summ a
INNER JOIN gdp
  ON a.country_code = gdp.olympic_cc
WHERE a.year = 2016
GROUP BY a.city, a.sex;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Filtering impacts

SELECT city, sex, COUNT(DISTINCT athlete_id), AVG(age) AS avg_age
FROM athletes_summ
WHERE city IN ('Rio de Janeiro','Beijing')
GROUP BY city, sex;
-----------------------------------------------------------------------------------------------------------------------------------------------
-- Read the query plan with the text city filter
EXPLAIN ANALYZE
SELECT city, sex, COUNT(DISTINCT athlete_id), AVG(age) AS avg_age
FROM athletes_summ
WHERE city IN ('Rio de Janeiro','Beijing')
GROUP BY city, sex;
-----------------------------------------------------------------------------------------------------------------------------------------------
-- Find the execution time with a numeric year filter
EXPLAIN ANALYZE
SELECT city, sex, COUNT(DISTINCT athlete_id), AVG(age) AS avg_age
FROM athletes_summ
WHERE year IN (2016,2008) -- Filter by year
GROUP BY city, sex;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
